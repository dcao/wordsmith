'\" t
.\"     Title: ws
.\"    Author: [see the "AUTHOR(S)" section]
.\" Generator: Asciidoctor 2.0.10
.\"      Date: 2020-01-20
.\"    Manual: General Commands Manual
.\"    Source: \ \&
.\"  Language: English
.\"
.TH "WS" "1" "2020-01-20" "\ \&" "General Commands Manual"
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.ss \n[.ss] 0
.nh
.ad l
.de URL
\fI\\$2\fP <\\$1>\\$3
..
.als MTO URL
.if \n[.g] \{\
.  mso www.tmac
.  am URL
.    ad l
.  .
.  am MTO
.    ad l
.  .
.  LINKSTYLE blue R < >
.\}
.SH "NAME"
ws \- the hacker\(aqs prose linter
.SH "SYNOPSIS"
.sp
\fBws\fP (\-h | \-\-help)
.sp
\fBws\fP (\-v | \-\-version)
.sp
\fBws\fP [\fIOPTIONS\fP] \fB\-r\fP \fIRULEFILE\fP ... [\fIPATH\fP ...]
.sp
\fBcommand\fP | \fBws\fP [\fIOPTIONS\fP] \fB\-r\fP \fIRULEFILE\fP ...
.SH "DESCRIPTION"
.sp
\fBws\fP is a linter for prose, designed to check prose files for problems with style and consistency. \fBws\fP reads rules from every \fIRULEFILE\fP passed in and uses them to check the files specified by \fIPATH\fP.
.sp
If a file is not passed in, \fBws\fP will read from stdin until EOF is reached.
.SH "OPTIONS"
.sp
\fB\-e, \-\-ext\fP \fIEXTFILE\fP
.RS 4
Adds the linter extension \fIEXTFILE\fP to the next invocation of \fBws\fP. Can be invoked multiple times to add multiple linter extensions.
.RE
.sp
\fB\-r, \-\-rule\fP \fIRULEFILE\fP
.RS 4
Adds the rule file \fIRULEFILE\fP to the next invocation of \fBws\fP. Can be invoked multiple times to add multiple rule files.
.RE
.sp
\fB\-h, \-\-help\fP
.RS 4
Prints help on \fBws\fP and exits.
.RE
.sp
\fB\-v, \-\-version\fP
.RS 4
Prints the version and exits.
.RE
.SH "RULES"
.sp
\fBws\fP does not come with a default set of rules, and will only check for the rules dictated by the rule files passed in with the \fB\-r\fP flag. A rule file can have any file extension.
.SS "SYNTAX"
.sp
Each rule consists of four sections separated by semicolons: the name of the rule, the rule type to be used for the rule, the message to be printed if the rule matches something in a piece of prose, and the "payload" to pass to the linter which determines what the linter should look for in the prose. The backslash can be used as an escape character to include a semicolon, newline, or backslash in a particular section. An example rule file looks like this:
.sp
.if n .RS 4
.nf
dcao.either;regex;don\(aqt use either;either
dcao.Wordsmith;regex;don\(aqt capitalize Wordsmith;Wordsmith
.fi
.if n .RE
.SS "DEFAULT RULE TYPES"
.sp
\fBws\fP comes with a number of default rule types which are included out\-of\-the\-box, with no additional extensions required.
.sp
\fBregex\fP
.RS 4
Matches a regex in a piece of prose. Regexes follow PCRE syntax.
.RE
.sp
\fBconsi\fP
.RS 4
Checks to make sure that only one of two regexes matches in a piece of prose. This linter requires two rules to be typed in, and the checker will ensure that only one out of those two matches in a piece of prose. If a consistency rule is provided without another matching consistency rule, it will be ignored. For example:
.RE
.sp
.if n .RS 4
.nf
dcao.adviser;consi;used adviser when advisor was previously used;adviser
dcao.advisor;consi;used advisor when adviser was previously used;advisor
dcao.blah;consi;blah;blah
.fi
.if n .RE
.sp
.if n .RS 4
.nf
In this example, the last consistency check rule will be thrown out.
.fi
.if n .RE
.SH "EXTENSIONS"
.sp
To allow for the easier addition of custom linters, \fBws\fP allows for extension files which add linters to ws. An example extension file which does nothing is shown below:
.sp
.if n .RS 4
.nf
#include <stdlib.h>

int init(void **ctx, rules_t *rules, sink_t sink) {
    return 0;
}

int report(void *ctx, prose_t prose) {
    return 0;
}

void deinit(void *ctx) {}
.fi
.if n .RE
.sp
Every extension file must define three functions:
.sp
\fBinit\fP
.RS 4
This function initializes the state of the linter, using the passed\-in array of rules to determine what the linter should be looking for in a given piece of prose. The function is also given a sink which should be used for outputting any matches during lint reporting.
.RE
.sp
\fBreport\fP
.RS 4
This function actully scans the prose for anything which may cause a lint to be reported, using the sink from linter initialization to report said matches.
.RE
.sp
\fBdeinit\fP
.RS 4
This function frees any resources allocated by the linter during initialization or reporting.
.RE
.sp
A number of types and functions are defined via preprocessor directives in all extension files:
.sp
\fBrule_t\fP
.RS 4
A struct representing a rule, containing a \fBname\fP, \fBrule\fP, message (\fBmesg\fP), and payload (\fBpayl\fP).
.RE
.sp
\fBrules_t\fP
.RS 4
An array of rules \- the actual array is contained in the \fBarray\fP field.
.RE
.sp
\fBprose_t\fP
.RS 4
A piece of prose with some \fBtext\fP and a \fBname\fP.
.RE
.sp
\fBlint_t\fP
.RS 4
A lint to report, containing a byte \fBoffset\fP, a \fBline\fP number, a \fBcol\fP number, the \fBprose\fP which it was found in, and the \fBrule\fP which matched.
.RE
.sp
\fBsink_t\fP
.RS 4
A sink to report lints to. Generally linters should not be creating or modifying sinks.
.RE
.sp
\fBsink_handle(sink, lint)\fP
.RS 4
A convenience function which reports a \fBlint\fP to a given \fBsink\fP.
.RE
.SH "AUTHORS"
.sp
Created and maintained by David Cao <\c
.MTO "david\(atcao.sh" "" ">."
For more information about development, see
.URL "https://github.com/dcao/wordsmith" "" "."